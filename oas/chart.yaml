openapi: 3.0.1
info:
  title: Services.Chart
  description: Services for getting chart data for instruments.
  version: 3.1.289+4232e82002
  x-framework-version: 22.0.53+2bad7e4dcc
  x-machine: SATOAWEB41-DK1
servers:
  - url: https://gateway.saxobank.com/openapi
paths:
  /chart/chart/ClientConfig:
    get:
      tags:
        - Charts
      summary: OBSOLETE Get the chart client configuration
      description: "Returns configuration data for the chart client.\r\n                Including:\r\n                Maximum/minimum amount of samples to request\r\n                Request frequency\r\n                Timeout values"
      operationId: ChartGetClientConfig
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientConfigData'
              example:
                CONFIGRATE: 215
                ERRORREPEAT: 226
                ERRORTIMEOUT: 9
                MAXFETCH: 224
                MINFETCH: 60
                REQUESTTIMEOUT: 185
                UPDATERATE: 245
                WAITREPEAT: 61
                WAITTIMEOUT: 127
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security:
        - OpenApiOAuthSecurityScheme: [ ]
        - OpenApiJWTSecurityScheme: [ ]
  '/chart/chart/{symbol}':
    get:
      tags:
        - Charts
      summary: OBSOLETE Get chart data for an instrument.
      description: Responsible for getting chart data for an instrument from the back end domain.
      operationId: ChartGetChartData
      parameters:
        - name: count
          in: query
          description: 'Optional number of samples. Max. is 1200, default is 0.'
          required: true
          schema:
            type: integer
            format: int32
        - name: horizon
          in: query
          description: "The horizon to get samples from. Values are interpreted in minutes: 1, 5, 10, 15, 30, 60, 120,\r\n                240, 360, 480, 1440, 10080, 43200."
          required: true
          schema:
            type: integer
            format: int32
        - name: mode
          in: query
          description: "Defines how to get the data from the chart feed server. Following options are available: START,\r\n                FROM, UPTO"
          required: true
          schema:
            type: string
        - name: seq
          in: query
          description: "Optional sequence id that is repeated in the response to help clients correlate responses with\r\n                requests. Must be an integer"
          schema:
            allOf:
              - type: integer
                format: int32
        - name: symbol
          in: path
          description: The symbol of the instrument to retreive data for. NB! Symbol is case sensitive.
          required: true
          schema:
            type: string
        - name: time
          in: query
          description: "Optional UTC time of the first/last sample. This depends on the MODE parameter. (MODE=FROM => time\r\n                equals first sample, MODE=UPTO => time equals last sample)."
          schema:
            allOf:
              - type: integer
                format: int32
        - name: tz
          in: query
          description: "Optional time zone to get UTC-offsets for. Must be a zone name from the tz-database\r\n                (http://www.iana.org/time-zones). Example: Australia/Hobart"
          schema:
            type: string
        - name: version
          in: query
          description: Optional protocol version. If not specified the default version 105 will be used.
          schema:
            type: string
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security:
        - OpenApiOAuthSecurityScheme: [ ]
        - OpenApiJWTSecurityScheme: [ ]
  '/chart/v1/charts/subscriptions/{contextId}/{referenceId}':
    delete:
      tags:
        - Charts
      summary: Remove subscription
      description: 'Removes subscriptions for the given reference id on this resource, and frees resources on the server.'
      operationId: ChartsDeleteSubscription
      parameters:
        - name: contextId
          in: path
          description: Unique streaming context ID part of the streaming session.
          required: true
          schema:
            type: string
          example: '20160204125301453'
        - name: referenceId
          in: path
          description: The reference id that identifies the subscription (within a streaming session).
          required: true
          schema:
            type: string
          example: '20160204125301444'
      responses:
        '204':
          description: No Content
        '202':
          description: Subscription delete request will be processed eventually.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security:
        - OpenApiOAuthSecurityScheme: [ ]
        - OpenApiJWTSecurityScheme: [ ]
  '/chart/v1/charts/subscriptions/{contextId}':
    delete:
      tags:
        - Charts
      summary: Remove multiple subscriptions
      description: 'Removes all subscriptions for the current session on this resource, and frees all resources on the server.'
      operationId: ChartsDeleteSubscriptions
      parameters:
        - name: contextId
          in: path
          description: Unique streaming context ID part of the streaming session.
          required: true
          schema:
            type: string
          example: '20160204125301453'
        - name: tag
          in: query
          description: Tag that subscriptions are marked with.
          schema:
            type: string
          example: TAB9
      responses:
        '204':
          description: No Content
        '202':
          description: Subscription delete request will be processed eventually.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security:
        - OpenApiOAuthSecurityScheme: [ ]
        - OpenApiJWTSecurityScheme: [ ]
  /chart/v1/charts/subscriptions:
    post:
      tags:
        - Charts
      summary: Create a subscription on chart data
      description: "Sets up a subscription and returns an initial snapshot of most recently completed samples specified by the parameters in the request.\r\n            \r\n\r\n            Subsequent samples are delivered over the streaming channel. Most often a single new sample or sample update is delivered at a time, \r\n            but when a sample closes, you will typcially get two samples: The now closed bar, and the bar just opening.\r\n            \r\n\r\n\r\n            Two events may require that a client application must close the current subscribtion and resubscribe:\r\n            \r\n\r\n\r\n*   The chart has been revised, either due to a correction or a corporate action.\r\n*   The data stream has shifted from real-time to delayed prices or visa versa.\r\n\r\n            In both cases the client application will receive a _resetsubscriptions instruction over the streaming channel."
      operationId: ChartsAddSubscriptionAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChartStreamingRequest'
            example:
              Arguments:
                AssetType: FxSpot
                Count: 2
                FieldGroups:
                  - ChartInfo
                  - Data
                  - DisplayAndFormat
                Horizon: 1
                Uic: 21
              ContextId: '20220218015854943'
              Format: application/json
              ReferenceId: CH19612
              RefreshRate: 1000
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartStreamingResponse'
              example:
                ContextId: '20220218015854954'
                Format: application/json
                InactivityTimeout: 0
                ReferenceId: CH57268
                RefreshRate: 1000
                Snapshot:
                  ChartInfo:
                    DelayedByMinutes: 15
                    ExchangeId: SBFX
                    FirstSampleTime: '2015-02-02T01:02:03.0000000+00:00'
                    Horizon: 1
                  Data:
                    - CloseAsk: 1.3475
                      CloseBid: 1.3473
                      HighAsk: 1.4003
                      HighBid: 1.4001
                      LowAsk: 1.2804
                      LowBid: 1.2802
                      OpenAsk: 1.3478
                      OpenBid: 1.3476
                      Time: '2015-02-01T11:45:00.0000000+00:00'
                    - CloseAsk: 1.3475
                      CloseBid: 1.3473
                      HighAsk: 1.4003
                      HighBid: 1.4001
                      LowAsk: 1.2804
                      LowBid: 1.2802
                      OpenAsk: 1.3478
                      OpenBid: 1.3476
                      Time: '2015-02-01T11:46:00.0000000+00:00'
                  DataVersion: 1892739
                  DisplayAndFormat:
                    Currency: USD
                    Decimals: 4
                    Description: Euro/US Dollar
                    Format: AllowDecimalPips
                    Symbol: EURUSD
                State: Active
                Tag: Tag01
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                required:
                  - ErrorCode
                  - Message
                type: object
                properties:
                  ErrorCode:
                    enum:
                      - InvalidModelState
                      - UnsupportedSubscriptionFormat
                    type: string
                    x-enum-descriptions:
                      InvalidModelState: Error code returned when model state is invalid.
                      UnsupportedSubscriptionFormat: Error code returned when a subscription format that isn't supported by the publisher is requested.
                  Message:
                    type: string
                  ModelState:
                    $ref: '#/components/schemas/ModelStateDictionary'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                required:
                  - ErrorCode
                  - Message
                type: object
                properties:
                  ErrorCode:
                    enum:
                      - SubscriptionLimitExceeded
                    type: string
                    x-enum-descriptions:
                      SubscriptionLimitExceeded: 'Error code returned when more than the maximum allowed number of subscriptions for a specified type, is exceeded.'
                  Message:
                    type: string
                  ModelState:
                    $ref: '#/components/schemas/ModelStateDictionary'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security:
        - OpenApiOAuthSecurityScheme: [ ]
        - OpenApiJWTSecurityScheme: [ ]
      x-streaming-type: '#/components/schemas/ChartResponseDomainEvent'
  /chart/v1/charts/subscriptions/active:
    post:
      tags:
        - Charts
      summary: Obsolete Create a subscription on chart data
      description: "Sets up a subscription and returns an initial snapshot of most recently completed samples specified by the parameters in the request.\r\n            \r\n\r\n            Subsequent samples are delivered over the streaming channel. Most often a single new sample or sample update is delivered at a time, \r\n            but when a sample closes, you will typcially get two samples: The now closed bar, and the bar just opening.\r\n            \r\n\r\n\r\n            Two events may require that a client application must close the current subscribtion and resubscribe:\r\n            \r\n\r\n\r\n*   The chart has been revised, either due to a correction or a corporate action.\r\n*   The data stream has shifted from real-time to delayed prices or visa versa.\r\n\r\n            In both cases the client application will receive a _resetsubscriptions instruction over the streaming channel."
      operationId: ChartsAddSubscriptionActiveAsync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChartStreamingRequest'
            example:
              Arguments:
                AssetType: FxSpot
                Count: 2
                FieldGroups:
                  - ChartInfo
                  - Data
                  - DisplayAndFormat
                Horizon: 1
                Uic: 21
              ContextId: '20220218015854943'
              Format: application/json
              ReferenceId: CH19612
              RefreshRate: 1000
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartStreamingResponse'
              example:
                ContextId: '20220218015854954'
                Format: application/json
                InactivityTimeout: 0
                ReferenceId: CH57268
                RefreshRate: 1000
                Snapshot:
                  ChartInfo:
                    DelayedByMinutes: 15
                    ExchangeId: SBFX
                    FirstSampleTime: '2015-02-02T01:02:03.0000000+00:00'
                    Horizon: 1
                  Data:
                    - CloseAsk: 1.3475
                      CloseBid: 1.3473
                      HighAsk: 1.4003
                      HighBid: 1.4001
                      LowAsk: 1.2804
                      LowBid: 1.2802
                      OpenAsk: 1.3478
                      OpenBid: 1.3476
                      Time: '2015-02-01T11:45:00.0000000+00:00'
                    - CloseAsk: 1.3475
                      CloseBid: 1.3473
                      HighAsk: 1.4003
                      HighBid: 1.4001
                      LowAsk: 1.2804
                      LowBid: 1.2802
                      OpenAsk: 1.3478
                      OpenBid: 1.3476
                      Time: '2015-02-01T11:46:00.0000000+00:00'
                  DataVersion: 1892739
                  DisplayAndFormat:
                    Currency: USD
                    Decimals: 4
                    Description: Euro/US Dollar
                    Format: AllowDecimalPips
                    Symbol: EURUSD
                State: Active
                Tag: Tag01
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                required:
                  - ErrorCode
                  - Message
                type: object
                properties:
                  ErrorCode:
                    enum:
                      - InvalidModelState
                      - UnsupportedSubscriptionFormat
                    type: string
                    x-enum-descriptions:
                      InvalidModelState: Error code returned when model state is invalid.
                      UnsupportedSubscriptionFormat: Error code returned when a subscription format that isn't supported by the publisher is requested.
                  Message:
                    type: string
                  ModelState:
                    $ref: '#/components/schemas/ModelStateDictionary'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                required:
                  - ErrorCode
                  - Message
                type: object
                properties:
                  ErrorCode:
                    enum:
                      - SubscriptionLimitExceeded
                    type: string
                    x-enum-descriptions:
                      SubscriptionLimitExceeded: 'Error code returned when more than the maximum allowed number of subscriptions for a specified type, is exceeded.'
                  Message:
                    type: string
                  ModelState:
                    $ref: '#/components/schemas/ModelStateDictionary'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      deprecated: true
      security:
        - OpenApiOAuthSecurityScheme: [ ]
        - OpenApiJWTSecurityScheme: [ ]
      x-streaming-type: '#/components/schemas/ChartResponseDomainEvent'
  /chart/v1/charts:
    get:
      tags:
        - Charts
      summary: Get chart data
      description: "Returns chart data as specified by the request parameters. Which data samples are returned, is specified by a combination of time, mode and count. \r\n            \r\n\r\n*   If neither time, mode or count are specified, the endpoint returns the most recent 1200 samples.\r\n*   If count is specified, the endpoint returns max of (count, 1200) samples.\r\n*   If Mode==\"Upto\" the endpoint returns a number of samples upto and including the specified Time.\r\n*   If Mode==\"From\" the endpoint returns a number of samples starting from  the specified Time"
      operationId: ChartsGetChartDataAsync
      parameters:
        - name: assetType
          in: query
          description: Assettype of the instrument
          required: true
          schema:
            title: Assettype of the instrument
            allOf:
              - $ref: '#/components/schemas/AssetType'
          example: FxSpot
        - name: count
          in: query
          description: 'Optionally specifies maximum number of samples to return, max 1200, default 1200.'
          schema:
            title: 'Optionally specifies maximum number of samples to return, max 1200, default 1200.'
            allOf:
              - type: integer
                format: int32
          example: 218
        - name: fieldGroups
          in: query
          description: 'Specifies which data to return. Default is [Data]'
          schema:
            title: 'Specifies which data to return. Default is [Data]'
            type: array
            items:
              $ref: '#/components/schemas/ChartFieldGroupSpec'
          example:
            - BlockInfo
        - name: horizon
          in: query
          description: 'The horizon to get samples from. Values are interpreted in minutes: 1, 5, 10, 15, 30, 60, 120, 240, 360, 480, 1440, 10080, 43200.'
          required: true
          schema:
            title: 'The horizon to get samples from. Values are interpreted in minutes: 1, 5, 10, 15, 30, 60, 120, 240, 360, 480, 1440, 10080, 43200.'
            type: integer
            format: int32
          example: 178
        - name: mode
          in: query
          description: 'If Time is supplied, mode specifies if the endpoint should returns samples "UpTo" (and including) or "From" (and including) the specified time.'
          schema:
            title: 'If Time is supplied, mode specifies if the endpoint should returns samples "UpTo" (and including) or "From" (and including) the specified time.'
            allOf:
              - $ref: '#/components/schemas/ChartRequestModeNullable'
          example: From
        - name: time
          in: query
          description: 'Specifies the time of a sample, which must either be the first (If Mode=="From") or the last (if Mode=="UpTo") in the returned data.'
          schema:
            title: 'Specifies the time of a sample, which must either be the first (If Mode=="From") or the last (if Mode=="UpTo") in the returned data.'
            allOf:
              - type: string
                format: date-time
                x-type-name: UtcDateTime
          example: '2022-06-29T03:52:15.722983Z'
        - name: uic
          in: query
          description: Uic of the instrument.
          required: true
          schema:
            title: Uic of the instrument.
            type: integer
            format: int32
          example: 178
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChartResponse'
              example:
                ChartInfo:
                  DelayedByMinutes: 15
                  ExchangeId: SBFX
                  FirstSampleTime: '2015-02-02T01:02:03.0000000+00:00'
                  Horizon: 1
                Data:
                  - CloseAsk: 1.3475
                    CloseBid: 1.3473
                    HighAsk: 1.4003
                    HighBid: 1.4001
                    LowAsk: 1.2804
                    LowBid: 1.2802
                    OpenAsk: 1.3478
                    OpenBid: 1.3476
                    Time: '2015-02-01T11:45:00.0000000+00:00'
                  - CloseAsk: 1.3475
                    CloseBid: 1.3473
                    HighAsk: 1.4003
                    HighBid: 1.4001
                    LowAsk: 1.2804
                    LowBid: 1.2802
                    OpenAsk: 1.3478
                    OpenBid: 1.3476
                    Time: '2015-02-01T11:46:00.0000000+00:00'
                DataVersion: 1892739
                DisplayAndFormat:
                  Currency: USD
                  Decimals: 4
                  Description: Euro/US Dollar
                  Format: AllowDecimalPips
                  Symbol: EURUSD
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'
        '429':
          $ref: '#/components/responses/TooManyRequests'
      security:
        - OpenApiOAuthSecurityScheme: [ ]
        - OpenApiJWTSecurityScheme: [ ]
components:
  schemas:
    AssetType:
      title: The possible AssetTypes for which you can get a quote or place an order or a trade.
      enum:
        - Bond
        - Cash
        - CertificateBonus
        - CertificateCappedBonus
        - CertificateCappedCapitalProtected
        - CertificateCappedOutperformance
        - CertificateConstantLeverage
        - CertificateDiscount
        - CertificateExpress
        - CertificateTracker
        - CertificateUncappedCapitalProtection
        - CertificateUncappedOutperformance
        - CfdIndexOption
        - CfdOnCompanyWarrant
        - CfdOnEtc
        - CfdOnEtf
        - CfdOnEtn
        - CfdOnFund
        - CfdOnFutures
        - CfdOnIndex
        - CfdOnRights
        - CfdOnStock
        - CompanyWarrant
        - ContractFutures
        - Etc
        - Etf
        - Etn
        - Fund
        - FuturesOption
        - FuturesStrategy
        - FxBinaryOption
        - FxForwards
        - FxKnockInOption
        - FxKnockOutOption
        - FxNoTouchOption
        - FxOneTouchOption
        - FxSpot
        - FxVanillaOption
        - GuaranteeNote
        - IpoOnStock
        - ManagedFund
        - MiniFuture
        - MutualFund
        - PortfolioNote
        - Rights
        - SrdOnEtf
        - SrdOnStock
        - Stock
        - StockIndex
        - StockIndexOption
        - StockOption
        - Warrant
        - WarrantDoubleKnockOut
        - WarrantKnockOut
        - WarrantOpenEndKnockOut
        - WarrantSpread
      type: string
      x-enum-descriptions:
        FxSpot: Forex Spot.
        FxForwards: Forex Forward.
        FxVanillaOption: Forex Vanilla Option.
        FxKnockInOption: Forex Knock In Option.
        FxKnockOutOption: Forex Knock Out Option.
        FxBinaryOption: Forex Binary Option.
        FxOneTouchOption: Forex One Touch Option.
        FxNoTouchOption: Forex No Touch Option.
        ContractFutures: Contract Futures.
        FuturesStrategy: Futures Strategy.
        Stock: Stock.
        StockOption: Stock Option.
        Bond: Bond.
        FuturesOption: Futures Option.
        StockIndexOption: Stock Index Option.
        ManagedFund: 'Obsolete: Managed Fund.'
        Cash: Cash. Not tradeable!
        CfdOnStock: Cfd on Stock.
        CfdOnIndex: Cfd on Stock Index.
        CfdOnFutures: Cfd on Futures.
        StockIndex: Stock Index.
        MutualFund: Mutual Fund.
        CfdIndexOption: Cfd Index Option.
        CfdOnEtf: Cfd on Etf
        CfdOnEtc: Cfd on Etc
        CfdOnEtn: Cfd on Etn
        CfdOnFund: Cfd on Fund
        CfdOnRights: Cfd on Rights
        CfdOnCompanyWarrant: Cfd on unlisted warrant issued by a corporation.
        Etf: Exchange traded fund.
        Etc: Etc
        Etn: Etn
        Fund: Fund
        Rights: Rights
        Warrant: Warrant
        MiniFuture: MiniFuture.
        WarrantSpread: Warrant with built-in spread.
        WarrantKnockOut: Warrant with a knock-out barrier.
        WarrantOpenEndKnockOut: Knock-out Warrant with no expiry.
        WarrantDoubleKnockOut: Warrant with two knock-out barriers.
        CertificateUncappedCapitalProtection: Guarantees a percentage increase of the underlying asset's value above the issue price at expiry/maturity. Max loss is the amount invested multiplied by the CapitalProtection percentage.
        CertificateCappedCapitalProtected: Guarantees a capped percentage increase of the underlying asset's value above the issue price at expiry/maturity. Max loss is the amount invested multiplied by the CapitalProtection percentage.
        CertificateDiscount: 'Yields a capped return if the underlying asset''s value is above the specified cap level at expiry. If the underlying''s value is below the strike at expiry, the investor received the underlying or equivalent value. Offers direct exposure in underlying at a lower price (discount) with a capped potential profit and limited loss.'
        CertificateCappedOutperformance: Capped Outperformance Certificate.
        CertificateCappedBonus: Certificate Capped Bonus.
        CertificateExpress: Certificate Express kick out.
        CertificateTracker: A certificate that mirrors the price movement of the underlying instrument. Often used to trade movements in indicies. Movements can be a fixed ratio of the underlying and can be inverted for bearish/short speculation. Risk is equivalent to owning the underlying.
        CertificateUncappedOutperformance: 'Provides leveraged returns when the underlying price exceeds the threshold strike price. The amount leverage is defined by the Participation %. When the underlying is below the strike price, the certificate mirrors the underlying price 1:1.'
        CertificateBonus: 'Mirrors the price movement of the underlying only if and when the underlying price exceeds the defined barrier. If the certificate expires below the barrier, it offers partial protection/return of investment.'
        CertificateConstantLeverage: Certificate Constant Leverage.
        SrdOnStock: SRD. (Service de Règlement Différé) on Stock.
        SrdOnEtf: SRD. (Service de Règlement Différé) on Etf.
        IpoOnStock: IPO on Stock
        CompanyWarrant: 'Unlisted warrant issued by a corporation, often physically settled.'
        PortfolioNote: Danish pooled investment scheme (“Pulje”). Not online tradeable.
        GuaranteeNote: Danish investment scheme (“Grantbevis”). Not online tradeable.
    ChartFieldGroupSpec:
      title: Specify which sections of the response you would like to get returned
      enum:
        - BlockInfo
        - ChartInfo
        - Data
        - DisplayAndFormat
      type: string
      x-enum-descriptions:
        BlockInfo: Return information about previous blocks
        ChartInfo: Return information about the time series
        Data: Return the chart data samples
        DisplayAndFormat: Return information about the instrument
    ChartInfo:
      title: Holds basic information about this chart time series
      type: object
      properties:
        DelayedByMinutes:
          title: 'If the pricefeed is delayed, this field will be returned indicating the delay in minutes.'
          type: integer
          format: int32
        ExchangeId:
          title: Id of the Exchange. Go to the ReferenceData/Exhanges endpoint to get exchange session info.
          type: string
        FirstSampleTime:
          title: The time of the first (oldest) available sample available for this instrument. Useful for the client when calculating the size of the horizontal slider.
          allOf:
            - type: string
              format: date-time
              x-type-name: UtcDateTime
        Horizon:
          title: Horizon in minutes.
          type: integer
          format: int32
    ChartRequestMode:
      title: Denotes in what mode chart data is requested.
      enum:
        - From
        - UpTo
      type: string
      x-enum-descriptions:
        From: From
        UpTo: Up to
    ChartRequestModeNullable:
      allOf:
        - $ref: '#/components/schemas/ChartRequestMode'
    ChartResponse:
      title: The response to a subscription request. Should contain a snapshot of the data matching the subscription request.
      type: object
      properties:
        ChartInfo:
          title: Chart info.
          allOf:
            - $ref: '#/components/schemas/ChartInfo'
        Data:
          title: The response to a chart subscription.
          type: array
          items:
            $ref: '#/components/schemas/ChartSample'
        DataVersion:
          title: Version info.
          type: integer
          format: int32
        DisplayAndFormat:
          title: Display info.
          allOf:
            - $ref: '#/components/schemas/DisplayAndFormat'
    ChartResponseDomainEvent:
      type: object
      properties:
        Data:
          title: 'The type of data transported by the DomainEvent instance (e.g. price update, position list update etc.).'
          allOf:
            - $ref: '#/components/schemas/ChartResponse'
        PartitionNumber:
          title: The partition number if this DomainEvent is a partition.
          allOf:
            - type: integer
              format: int32
        ReferenceId:
          title: 'Client specified id, which is sent back to the client with every data update.'
          type: string
        Timestamp:
          title: The UTC date and time of the event.
          type: string
          format: date-time
          x-type-name: UtcDateTime
        TotalPartitions:
          title: The total number of partitions if this DomainEvent is a partition.
          allOf:
            - type: integer
              format: int32
    ChartSample:
      title: Information pertaining to a specific chart sample interval.
      type: object
      properties:
        Close:
          title: Close
          allOf:
            - type: number
        CloseAsk:
          title: CloseAsk
          allOf:
            - type: number
        CloseBid:
          title: CloseBid
          allOf:
            - type: number
        Growth:
          title: Growth
          allOf:
            - type: number
        High:
          title: High
          allOf:
            - type: number
        HighAsk:
          title: HighAsk
          allOf:
            - type: number
        HighBid:
          title: HighBid
          allOf:
            - type: number
        Interest:
          title: Interest
          allOf:
            - type: number
        Low:
          title: Low
          allOf:
            - type: number
        LowAsk:
          title: LowAsk
          allOf:
            - type: number
        LowBid:
          title: LowBid
          allOf:
            - type: number
        Open:
          title: Open
          allOf:
            - type: number
        OpenAsk:
          title: OpenAsk
          allOf:
            - type: number
        OpenBid:
          title: OpenBid
          allOf:
            - type: number
        Time:
          title: Time
          type: string
          format: date-time
          x-type-name: UtcDateTime
        Volume:
          title: Volume
          allOf:
            - type: number
    ChartStreamingRequest:
      title: Public contract for setting up a subscription to chart data.
      required:
        - ContextId
        - ReferenceId
      type: object
      properties:
        ContextId:
          title: "The streaming context id that this request is associated with.\r\n            This parameter must only contain letters (a-z) and numbers (0-9) as well as - (dash) and _ (underscore). It is case insensitive. Max length is 50 characters."
          pattern: '^[a-zA-Z0-9_-]{1,50}$'
          type: string
          x-display-order: 1
        ReferenceId:
          title: "Mandatory client specified reference id for the subscription.\r\n            This parameter must only contain alphanumberic characters as well as - (dash) and _ (underscore). Cannot start with _. It is case insensitive. Max length is 50 characters."
          pattern: '^[a-zA-Z0-9-][a-zA-Z0-9_-]{0,49}$'
          type: string
          x-display-order: 2
        Arguments:
          title: Arguments for the subscription request.
          allOf:
            - $ref: '#/components/schemas/ChartSubscriptionRequest'
        Format:
          title: "Optional Media type (RFC 2046) of the serialized data updates that are streamed to the client.\r\n            Currently only application/json and application/x-protobuf is supported.\r\n            If an unrecognized format is specified, the subscription end point will return HTTP status code 400 - Bad format."
          type: string
        RefreshRate:
          title: "Optional custom refresh rate, measured in milliseconds, between each data update.\r\n            Note that it is not possible to get a refresh rate lower than the rate specified in the\r\n            customer service level agreement (SLA)."
          maximum: 2147483647
          minimum: 0
          type: integer
          format: int32
        ReplaceReferenceId:
          title: Reference id of the subscription that should be replaced.
          pattern: '^[a-zA-Z0-9-][a-zA-Z0-9_-]{0,49}$'
          type: string
        Tag:
          title: Optional client specified tag used for grouping subscriptions.
          type: string
    ChartStreamingResponse:
      title: Subscription response.
      type: object
      properties:
        ContextId:
          title: The streaming context id that this response is associated with.
          type: string
          deprecated: true
          x-deprecated-date: '2022-11-01T00:00:00.0000000+00:00'
          x-display-order: 1
        ReferenceId:
          title: The reference id that (along with streaming context id and session id) identifies the subscription (within the context of a specific service/subscription type)
          type: string
          deprecated: true
          x-deprecated-date: '2022-11-01T00:00:00.0000000+00:00'
          x-display-order: 2
        Format:
          title: 'The media type (RFC 2046), of the serialized data updates that are streamed to the client.'
          type: string
        InactivityTimeout:
          title: The time (in seconds) that the client should accept the subscription to be inactive before considering it invalid.
          type: integer
          format: int32
        RefreshRate:
          title: Actual refresh rate assigned to the subscription according to the customers SLA.
          type: integer
          format: int32
        Snapshot:
          title: 'Snapshot of the current data on hand, when subscription was created.'
          allOf:
            - $ref: '#/components/schemas/ChartResponse'
        State:
          title: The value "Active".
          type: string
          description: This property is kept for backwards compatibility.
          deprecated: true
          x-deprecated-date: '2022-11-01T00:00:00.0000000+00:00'
        Tag:
          title: 'Client specified tag assigned to the subscription, if specified in the request.'
          type: string
    ChartSubscriptionRequest:
      title: Specifies which chart data to subscribe to.
      required:
        - AssetType
        - Horizon
        - Uic
      type: object
      properties:
        AssetType:
          title: Assettype of the instrument
          allOf:
            - $ref: '#/components/schemas/AssetType'
        Count:
          title: 'Optionally specifies maximum number of samples to return, max 1200, default 1200.'
          allOf:
            - type: integer
              format: int32
        FieldGroups:
          title: 'Specifies which data to return. Default is [Data]'
          type: array
          items:
            $ref: '#/components/schemas/ChartFieldGroupSpec'
        Horizon:
          title: 'The horizon to get samples from. Values are interpreted in minutes: 1, 5, 10, 15, 30, 60, 120, 240, 360, 480, 1440, 10080, 43200.'
          type: integer
          format: int32
        Uic:
          title: Uic of the instrument.
          type: integer
          format: int32
    ClientConfigData:
      type: object
      properties:
        ConfigRate:
          type: integer
          format: int32
        ErrorRepeat:
          type: integer
          format: int32
        ErrorTimeout:
          type: integer
          format: int32
        MaxFetch:
          type: integer
          format: int32
        MinFetch:
          type: integer
          format: int32
        RequestTimeout:
          type: integer
          format: int32
        UpdateRate:
          type: integer
          format: int32
        WaitRepeat:
          type: integer
          format: int32
        WaitTimeout:
          type: integer
          format: int32
    DisplayAndFormat:
      title: Display information for chart data.
      type: object
      properties:
        Currency:
          title: The currency in which the data is displayed.
          type: string
        Decimals:
          title: The number of decimals in the chart data.
          type: integer
          format: int32
        Description:
          title: Description of the data.
          type: string
        Format:
          title: The format in which data is delivered.
          allOf:
            - $ref: '#/components/schemas/PriceDisplayFormatType'
        NumeratorDecimals:
          title: Provided when format is either fractions or ModernFractions. Indicates how many decimals are shown in the numerator value in a fraction.
          allOf:
            - type: integer
              format: int32
        Symbol:
          title: The symbol of the instrument.
          type: string
    ModelStateDictionary:
      type: object
      additionalProperties:
        type: array
        items:
          type: string
    PriceDisplayFormatType:
      title: The format modifiers in which a price must be displayed and possibly edited.
      enum:
        - AllowDecimalPips
        - Fractions
        - ModernFractions
        - Normal
        - Percentage
      type: string
      x-enum-descriptions:
        Normal: Standard decimal formatting is used with the Decimals field indicating the number of decimals.
        Fractions: "Display as regular fraction i.e. 3 1/4 The Decimals field indicates the fraction demoninator as 1/(2^x).\r\n            So if Decimals is 2, the value should represent the number of 1/4'ths."
        ModernFractions: "Display as modern faction, e.g. 1’07.5. The Decimals field indicates the fraction demoninator as 1/(2^x).\r\n            So if Decimals is 5, the value should represent the number of 1/32'ths"
        AllowDecimalPips: "Display the last digit as a smaller than the rest of the numbers. Note that this digit is not included in the number of decimals,\r\n            effectively increasing the number of decimals by one. E.g. 12.345 when Decimals is 2 and DisplayFormat is AllowDecimalPips."
        Percentage: 'Display as percentage, e.g. 12.34%. The Decimals field indicates the number of decimals to show.'
  responses:
    BadRequest:
      description: One or more of the provided parameters are invalid.
      content:
        application/json:
          schema:
            required:
              - ErrorCode
              - Message
            type: object
            properties:
              ErrorCode:
                enum:
                  - InvalidRequest
                type: string
                x-enum-descriptions:
                  InvalidRequest: Default error code returned when it cannot be determined which part of the request is malformed.
              Message:
                type: string
              ModelState:
                $ref: '#/components/schemas/ModelStateDictionary'
    ServiceUnavailable:
      description: Service Unavailable.
    TooManyRequests:
      description: The request was rejected due to rate limit being exceeded.
    Unauthorized:
      description: Indicates that the request was rejected because the 'Authorization' header was missing in the request or contained an invalid security token.
  securitySchemes:
    OpenApiJWTSecurityScheme:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OpenApiOAuthSecurityScheme:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://live.logonvalidation.net/authorize
          tokenUrl: https://live.logonvalidation.net/token
          scopes: { }
tags:
  - name: Charts
    description: Allows you to set up subscriptions for streamed charts data.